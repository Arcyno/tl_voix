function [lpc_frames,acf] = mylpc(f_ech,son,frames_length,ordre);

%f_ech = 16000;
%chargement du fichier
%son= wavread('test3/adroite.wav');
%frames_length = 320 ;
%ordre = 150;

%création des trames
Nsamps = length(son);
Nframes = (floor(Nsamps / frames_length)) * 2 -1;
frames = zeros(Nframes,frames_length);
fen = hamming(frames_length);
lpc_frames = zeros(Nframes,ordre + 1);

for frame = 1: Nframes
    frames(frame,:) = fen .* son(frames_length*(frame - 1)/2 + 1: frames_length*(frame + 1)/2);
end

%figure
for frame = 1: Nframes           %###########################################################%
    
    
    %%levinson-durbin
    
    %autocorrélation
%     son_fen = frames(frame,:);
    son_fen = son';
    acf = zeros(1,ordre+1);
    
    for m = 1 : ordre + 1
        xdecale = zeros(1,frames_length);
        xdecale(m:frames_length) = son_fen(1:frames_length + 1 - m);
        acf(m) = son_fen*(xdecale');
    end
    
%     acf(1:ordre+1) = [];                %% on enl\`eve la partie n\'egative
%     acf(1) = real(acf(1));           %% Levinson-Durbin requiert c(1)==conj(c(1))
    
    ref = zeros(ordre,1);
    tmp = -acf(2)/acf(1);
    lpc = [ tmp ];
    sigma2 = real( ( 1 - tmp*conj(tmp)) * acf(1) ); %% real : enl\`eve une \'eventuelle
    %%   partie imaginaire r\'esiduelle
    ref(1) = tmp;
    for tt = 1 : 3
        tmp = -(acf(tt+1) + lpc * acf(tt:-1:2)') / sigma2; %e3
        'lpc'
        lpc
        'tmp'
        tmp
        'lcp..'
        lpc(tt-1:-1:1)
        lpc = [ lpc + tmp*conj(lpc(tt-1:-1:1)), tmp ]; %E4
        sigma2 = sigma2 * ( 1 - real(tmp*conj(tmp)) );
        ref(tt) = tmp;
    end
%    lpc_frames(frame,:) = [1, lpc];
%     plot(lpc);
end%###########################################################%
end